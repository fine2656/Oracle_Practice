

 ----- *** NULL 을 처리해주는 함수 *** -----

 1. nvl

    select 2+3
    from dual;

    select nvl(7,3), nvl(null, 3),
           nvl('이순신', '거북선'), nvl(null, '거북선')
    from dual;


 2. nvl2

    select nvl2(7,3,2), nvl2(null,3,2),
           nvl2('이순신', '거북선', '구국영웅'),
           nvl2(null, '거북선', '구국영웅')
    from dual;
    
/*
   null 은 존재하지 않는 것이므로 사칙연산(+ - * /) 에 들어가면
   그 결과는 무조건 null 이 된다.
*/

select 5+2, 5+null, 5-null, 0*null, 1/null
from dual;    

select *
from employees;

select employee_id, first_name, last_name, department_id
from employees
where department_id = 50;

select employee_id, first_name, last_name, department_id, salary, job_id
from employees
where department_id = 50;


select employee_id, first_name, last_name,
       salary, commission_pct,
       salary * commission_pct,
       salary + (salary * commission_pct),
       nvl( salary + (salary * commission_pct), salary ),
       nvl2( commission_pct, salary + (salary * commission_pct), salary)
from employees;


select employee_id, first_name, last_name,
       salary, commission_pct,
       nvl( salary + (salary * commission_pct), salary )
from employees;



select sysdate, to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss')
from dual;

select 123 || '현재시각은 ' || to_char(sysdate, 'yyyy-mm-dd hh24:mi:ss') 
from dual;

--- *** 테이블에 컬럼 추가하기 *** 
--- employees 테이블에 주민번호 컬럼을 추가하겠습니다. 

9107201234567 
9207202234567 

0208153234567
0308154234567

select '0207153234567'
       ,0207153234567
from daul;

select 01+1, 01, '01'
from dual;

alter table employees
add jubun varchar2(13);

desc employees;


-- 테이블에 컬럼 삭제하기
(employees 테이블에 jubun 컬럼을 삭제하겠습니다.)

alter table employees
drop column jubun;

desc employees;

alter table employees
add jubun varchar2(13);

select *
from employees;

select *
from employees;


-- employees 테이블에서 사원들이 근무하고 있는 부서번호를
-- 조회하고자 한다.

select distinct department_id
from employees;

/*
   select 되어진 결과물에서 행의 결과값이 중복되어 나온다면
   중복된 행을 제거하고 1개만 보이고 싶다.
   이럴때 select 바로 다음에 distinct 를 쓰면 된다.
*/

select distinct department_id, job_id 
from employees;

select distinct department_id as "부서번호"
     , job_id 
from employees
-- order by department_id asc;
-- order by "부서번호" asc;
order by 1 asc;
-- department_id 값을 기준으로 오름차순 한다.

-- *** 정렬시 오라클은 null 을 제일 큰것으로 간주하므로
--     오름차순을 하면 맨 밑에 나온다.
-- *** 정렬시 MS-SQL Sever 은 null 을 제일 작은것으로 간주하므로
--     오름차순을 하면 가장 첫번째에 나온다. 

select distinct department_id, job_id 
from employees;

select distinct department_id, job_id 
from employees
order by department_id desc;
-- department_id 값을 기준으로 내림차순 한다.

select distinct department_id, job_id 
from employees
order by department_id;
-- 정렬시 asc 은 생략할 수 있다.

select distinct department_id, job_id 
from employees
order by job_id;
-- job_id 컬럼의 값을 기준으로 오름차순 정렬한다.

select distinct department_id, job_id 
from employees
order by 2;

select distinct department_id "부서번호"
     , job_id "직종아이디"
from employees
order by "직종아이디" desc;

---- *** 비교연산자 *** -----
1. 같다      = 
2. 같지않다   !=  <>  ^= 
3. 크다.작다.같거나크다.같거나작다  >  <   >=   <= 

/*
  employees 테이블에서 부서번호가 50번인 부서에 근무하는
  사원들의 부서번호, 사원번호, 사원명, 월급을 나타내세요.
*/
select department_id as "부서번호"
     , employee_id as "사원번호"
     , first_name || ' ' || last_name as "사원명"
     , nvl(salary + (salary * commission_pct), salary) as "월급"
from employees 
where department_id = 50
-- order by nvl(salary + (salary * commission_pct), salary) desc; 
-- order by "월급" desc; 
order by 4 desc; 


/*
  employees 테이블에서 부서번호가 50번이 아닌 부서에 근무하는
  사원들의 부서번호, 사원번호, 사원명, 월급을 나타내세요.
  월급의 내림차순으로 보여주세요.
*/
select department_id as "부서번호"
     , employee_id as "사원번호"
     , first_name || ' ' || last_name as "사원명"
     , nvl(salary + (salary * commission_pct), salary) as "월급"
from employees 
where department_id != 50
--order by department_id asc, nvl(salary + (salary * commission_pct), salary) desc; 
--order by department_id, nvl(salary + (salary * commission_pct), salary) desc; 
--order by "부서번호", "월급" desc; 
order by 1, 4 desc;

/*   ==== !!!! 중요!!!! ====
     null은 존재하지 않는 것이므로 비교대상이 될수가 없다.
     그러므로 비교연산자(= != <> ^= > < >= <=)를
     사용할 수 없다.!!! 
     그래서 비교연산자를 사용하려면 nvl()함수, nvl2()함수로
     처리해야 한다.
*/
 desc employees;

 select first_name || ' ' || last_name ENAME
      , department_id
      , nvl(department_id, -10)
 from employees 
 where nvl(department_id, -10) != 50;
 
 
 select department_id as "부서번호"
      , employee_id as "사원번호"
      , first_name || ' ' || last_name as "사원명"
      , nvl(salary + (salary * commission_pct), salary) as "월급"
 from employees 
 where nvl(department_id, -10) != 50
 order by 1, 4 desc;
 
 -- employees 테이블에서 department_id 컬럼의 값이
 -- null 인 사원만 모든 컬럼의 정보를 나타내세요.

 select *
 from employees
 where department_id = null;
 
 select *
 from employees
 where nvl(department_id, -10) = -10;
 
 select *
 from employees
 where department_id is null;
 
 -- employees 테이블에서 department_id 컬럼의 값이
 -- null 이 아닌 사원만 모든 컬럼의 정보를 나타내세요.
 select *
 from employees
 where department_id is not null;
 
 /*
   오라클은 입력되어진 데이터값에 대해서만 대,소문자를 구분한다.
   컬럼명과 테이블명은 대,소문자를 구분하지 않는다.
*/

select employee_id
     , first_name || ' ' || last_name
     , salary
from employees;

SELECT EMPLOYEE_ID
     , FIRST_NAME || ' ' || LAST_NAME
     , SALARY
FROM EMPLOYEES;

SELECT Employee_Id
     , FIRST_NAME || ' ' || last_name
     , saLAry
FROM emploYees;


select employee_id, first_name, last_name, salary
from employees
where first_name = 'John';

select employee_id, first_name, last_name, salary
from employees
where first_name = 'john';

select employee_id, first_name, last_name, salary
from employees
where first_name = 'JOHN';

select employee_id, first_name, last_name, salary
from employees
where first_name = 'jOHn';

select 'kOReA seOUl'
     , upper('kOReA seOUl')   -- 모든 문자를 대문자로 변경해주는 함수
     , lower('kOReA seOUl')   -- 모든 문자를 소문자로 변경해주는 함수
     , initcap('kOReA seOUl') -- 단어별로 첫글자만 대문자, 나머지는 소문자로 변경해주는 함수
from dual;

select first_name
     , upper(first_name)
     , lower(first_name)
from employees;

select employee_id, first_name, last_name, salary
from employees
where lower(first_name) = lower('jOhN');

select employee_id, first_name, last_name, salary
from employees
where upper(first_name) = upper('jOhN');

/*
   employees 테이블에서 검색어로 성명을 'jOHn sEo' 로
   검색했을 경우 사원번호, 성, 이름, 기본급여를 나타내세요.
*/
select employee_id
     , first_name
     , last_name
     , salary
from employees
where lower(first_name || ' ' || last_name) = lower('jOHn sEo');


select employee_id
     , first_name
     , last_name
     , salary
from employees
where lower(first_name || ' ' || last_name) = lower('   jOHn sEo    ');


select employee_id
     , first_name
     , last_name
     , salary
from employees
where lower(first_name || ' ' || last_name) = trim(lower('   jOHn sEo    '));

-- *** or, and , not, in 연산자에 대해서 알아본다. *** --
/*
   employees 테이블에서 부서번호가 30, 60, 90번 부서에
   근무하는 사원들에 대해서
   사원번호, 사원명, 연봉(월급*12), 부서번호를 출력하세요.
*/
select employee_id
     , first_name || ' ' || last_name AS ENAME
     , nvl( salary + (salary * commission_pct), salary)*12 AS YEARPAY
     , department_id 
from employees
where department_id = 30 or
      department_id = 60 or
      department_id = 90;
      
      
select employee_id
     , first_name || ' ' || last_name AS ENAME
     , nvl( salary + (salary * commission_pct), salary)*12 AS YEARPAY
     , department_id
from employees
where department_id in(30,60,90);      


/*
   employees 테이블에서 부서번호가 30, 60, 90번 부서에
   근무하지 않는 사원들에 대해서
   사원번호, 사원명, 연봉(월급*12), 부서번호를
   부서번호의 오름차순으로 정렬한 후, 연봉의 내림차순으로 정렬하여 출력하세요.
*/
select employee_id
     , first_name || ' ' || last_name AS ENAME
     , nvl( salary + (salary * commission_pct), salary)*12 AS YEARPAY
     , department_id
from employees
where nvl(department_id, -10) != 30 and 
      nvl(department_id, -10) != 60 and  
      nvl(department_id, -10) != 90
order by department_id, yearpay desc; 


select employee_id
     , first_name || ' ' || last_name AS ENAME
     , nvl( salary + (salary * commission_pct), salary)*12 AS YEARPAY
     , department_id
from employees
where not nvl(department_id, -10) in(30,60,90)
order by department_id, yearpay desc;
      

select employee_id
     , first_name || ' ' || last_name AS ENAME
     , nvl( salary + (salary * commission_pct), salary)*12 AS YEARPAY
     , department_id
from employees
where nvl(department_id, -10) not in(30,60,90)
order by department_id, yearpay desc;


/*
   === and , or , not 연산자의 우선순위가 있다. ===
   and , or , not 연산자가 혼용되어지면 우선순위를 따르는데
   not > and > or 의 순위를 따라간다.
   우선순위에 있어서 최우선은 () 이다.
*/
select 2+3*4
from dual; -- 14

/*
   employees 테이블에서 부서번호가 30, 50, 60번 부서에
   근무하는 사원들중에 연봉(월급*12)이 20000 이상 60000 이하인
   사원들만 사원번호, 사원명, 연봉(월급*12), 부서번호를
   부서번호의 오름차순으로 정렬한 후, 연봉의 내림차순으로 정렬하여 출력하세요.
*/
select employee_id
     , first_name || ' ' || last_name AS ENANE
     , nvl( salary + (salary * commission_pct), salary)*12 AS YEARPAY
     , department_id
from employees
where department_id = 30 or 
      department_id = 50 or 
      department_id = 60 and 
      nvl( salary + (salary * commission_pct), salary)*12 >= 20000 and 
      nvl( salary + (salary * commission_pct), salary)*12 <= 60000
order by department_id, yearpay desc;


select employee_id
     , first_name || ' ' || last_name AS ENANE
     , nvl( salary + (salary * commission_pct), salary)*12 AS YEARPAY
     , department_id
from employees
where (department_id = 30 or 
       department_id = 50 or 
       department_id = 60) and 
      nvl( salary + (salary * commission_pct), salary)*12 >= 20000 and 
      nvl( salary + (salary * commission_pct), salary)*12 <= 60000
order by department_id, yearpay desc;


select employee_id
     , first_name || ' ' || last_name AS ENANE
     , nvl( salary + (salary * commission_pct), salary)*12 AS YEARPAY
     , department_id
from employees
where department_id in(30,50,60) and 
      nvl( salary + (salary * commission_pct), salary)*12 >= 20000 and 
      nvl( salary + (salary * commission_pct), salary)*12 <= 60000
order by department_id, yearpay desc;


-- 범위를 나타내어주는 연산자가 있다.
-- A 부터 B 까지 ==> between A and B 
select employee_id
     , first_name || ' ' || last_name AS ENANE
     , nvl( salary + (salary * commission_pct), salary)*12 AS YEARPAY
     , department_id
from employees
where department_id in(30,50,60) and 
      nvl( salary + (salary * commission_pct), salary)*12 between 20000 and 60000 
order by department_id, yearpay desc;

-- in 보다는 or 를, between A and B 보다는 >= <= 를 사용할 것을 권장한다.

    /*
        === DML(Data Manuplation Language) : 데이터 조작어, 수동 commit
           == 컬럼의 데이터값 변경하기 : update 
           == 행을 입력하기          : insert
           == 행을 삭제하기          : delete 
        === DDL(Data Defination Language) :  데이터 정의어(Auto Commit)
           == create, alter, drop, truncate 
        
        === DCL(Data Control Language) : Auto Commit
           ==grant, revoke 
           
        === TCL(Transction Control Language)
           == commit,rollback
    */
    
     update employees set first_name = '최',last_name = '수욱', salary = 500
     where employee_id = 100;
     rollback;-- 원상복구
     
     update employees set first_name = '최',last_name = '수욱', salary = 500
     where employee_id = 100;
     commit; -- 디스크에 저장하기(rollback 되지 않음)
    
     update employees set first_name = 'Steven',last_name = 'King', salary = 24000
     where employee_id = 100;     
     
   ---테이블 생성하기 ---
   creat table tbl_test
   -- creat table 테이블명
   (no number(3) -- 범위 : -999 ~ 999 ,  number() :  무제한, number(5,2) : -999.99 ~ 999.99, 
   ,name varchar2(20) --20 byte , 한글 10자
   ,addr varchar2(100)
   ); -- Maxmum : 100byte
   
   
   -- 테이블 삭제하기 --
   drop table tbl_test purge;
   
   
   ---테이블 생성하기 ---
  create table tbl_test 
  (no number(3), 
  name varchar2(20) , 
  addr varchar2(100));
  
 
   insert into tbl_test(no,name,addr)
   values (1, '일지매','서울시 종로구');
    
       insert into tbl_test(no,name,addr)
   values (2, '두지매','서울시 강서구');
     
        insert into tbl_test(no,name,addr)
   values (3, '삼지매','서울시 강남구');
      
    select *
    from tbl_test;
    
    rollback; -- 마지막 commit으로 돌아감
    
    commit;
    
    delete from tbl_test
    where no = 2; -- 이조건에 만족하는 행만 삭제        
    
    update tbl_test set name = '김기사'
                        addr = '경기도 수원시';
                        
   create table tbl_exam 
  (no number(3), 
  name varchar2(20) , 
  addr varchar2(100),
  email varchar2(50)
  ); 
  
   rollback; 
    
 --** like 연산자 **--
   Select*
   from  employees
   where  department_id like 80;
   
   Select*
   from  employees
   where department_id = 80;
   
      Select*
   from  employees
   where employee_id = 100;
   
   update employees set first_name = 'J'
   where employee_id = 100;

    rollback;
    
    /*
        employees 테이블에서 first_name 의 값이 첫글자가 'J'로 시작하는 사원들만 모든 정보를 나타내세요
    */
    
    select*
    from employees
    where first_name like 'J%'; -- 'J +%' :  
    -- like 연산자와 함께 사용되어지는 %는 Wild Character 라 부르는데 그 뜻은 시작하는 글자 J 뒤에 글자가 있든지 없든지 상관없다.
    
    select *
    from employees 
    where first_name like '%s';
    -- 마지막 글자가 s로 끝난다
    
        
    select *
    from employees 
    where first_name like '%ee%';
    --연속되어진 소문자 ee만 있으면 됨
    
    select *
    from employees 
    where first_name like '%e%e%';
    
    /*
    like 연산자와 함께 사용하는 _ 는 아무글자 1개를 뜻한다.
    like 연산자와 함께 사용하는 %는  글자가 있든지 없든지 관계없다.
    */
   select *
   from employees
   where last_name like 'F_e%'; -- Feeney
   
  
   -- ** 컬럼의 값을 변경하기 **--
   update employees set first_name = '최' -- '=' : 대입한다
                    ,   last_name = '수욱'
                    ,   salary = 50;
                    
    select *                
    from employees;            
    
    rollback; -- 원상복구
      
    -- [퀴즈] employees 테이블에서 성별이 여자만 사원번호,사원명, 주민번호를 나타내세dy
    
    select employee_id,first_name || ' ' || last_name, jubun
    from employees 
    where jubun like '______2%' or
    jubun like '______%';
    
    
    
    
    
